Man = Manifold(4, 'M') #ManifoldX.<t,r,th,ph> = Man.chart(r't r:(0,+oo) th:(0,pi):\theta ph:(0,2*pi):\phi')rho = function('rho', latex_name='\\rho')P = function('p')nu = function('nu')m = function('m')g = Man.lorentzian_metric('g')g[0,0] = -exp(2*nu(r))g[1,1] = 1/(1-2*m(r)/r)g[2,2] = r^2g[3,3] = (r*sin(th))^2print('Metric:')show(g.display())Ricci_scalar = g.ricci_scalar() #Ricci Scalar.Ricci = g.ricci() #Ricci tensor.upRic = Ricci.up(g) #Index-uppered Ricci tensor.gg= g.up(g) #Index-uppered metric.ET = Ricci - 1/2*g.ricci_scalar() * gET.set_name('G')ETup=ET.up(g)ETmix=ETup['^ij']*g['_jk']ETmix.set_name('G')riem = g.riemann() #Riemann tensor and its lowered-uppered index ver.riemup = riem.up(g)riemdown = riem.down(g)weyl = g.weyl() #Weyl tensor and its lowered-uppered index ver.weylup = weyl.up(g)weyldown= weyl.down(g)Weyl_scalar = weyldown['_ijkl']*weylup['^ijkl']Contracted_ricci = Ricci['_ij']*upRic['^ij']Kretschmann_scalar = riemdown['_ijkl']*riemup['^ijkl']show('EFEs:')show(ET.display_comp())show('EFEs with Mixed Components:')show(ETmix.display_comp())#Defining the 4-velocityu = Man.vector_field('u')u[0] = exp(-nu(r))print('The 4-velocity:')show(u.display())u_form = u.down(g) #index lowerede 4-velocity.#Stress-Energy Tensorprint('Stress-Energy tensor:')T = (rho(r)+p(r))* (u_form * u_form) + p(r) * gT.set_name('T')show(T.display_comp())Tmix = g.inverse()['^ij']*T['_jk']#defining the E=G-kT=0 equation to solve the Einstein's equations.print('E=G-kT=0 equation:')E = ET - 8*pi*TE.set_name('E')show(E.display_comp())#m', nu' ve nu'' degerlerini cozdurdum.EE0_solv = solve(E[0,0].expr()==0, diff(m(r),r))EE_0 = EE0_solv[0]show(EE_0.full_simplify())EE1_solv = solve(E[1,1].expr()==0, diff(nu(r),r))EE_1 = EE1_solv[0]show(EE_1.full_simplify())EE2_solv = solve(E[2,2].expr()==0, diff(diff(nu(r),r),r))EE_2 = EE2_solv[0]show(EE_2.full_simplify())#Curvature scalar'larda yerine koymak icin turevli ifadeleri tekrar tanimladim.diffm=EE_0.rhs()diffnu=EE_1.rhs()diffdiffnu=(8*pi*r^3*p(r) - (r^3 - 2*r^2*m(r))*((4*pi*(r**3)*p(r)+m(r))/((r**2)-2*r*m(r)))^2 + r*(4*pi*(r**2)*rho(r)) + (r^2*(4*pi*(r**2)*rho(r)) - r^2 + r*m(r))*((4*pi*(r**3)*p(r)+m(r))/((r**2)-2*r*m(r))) - m(r))/(r^3 - 2*r^2*m(r))#diffdiffnu=EE_2.rhs()#((4*pi*(r**3)*p(r)+m(r))/((r**2)-2*r*m(r)))#(4*pi*(r**2)*rho(r))#d(nu)/dr d^2(nu)/dr^2 ve d(m)/dr'yi curvature scalar denklemlerinde yerine koyup p ve rho cinsinden yazdirdim.print('Ricci scalar in terms of Energy-Momentum tensor')naked_Ricci_scalar=-2*((r^2 - 2*r*m(r))*((diffnu))^2 - (r*(diffm) - 2*r + 3*m(r))*(diffnu) + (r^2 - 2*r*m(r))*(diffdiffnu) - 2*(diffm))/r^2show(naked_Ricci_scalar.full_simplify())print('Fully Contracted Ricci Tensor in terms of Energy-Momentum tensor')naked_Contracted_ricci=2*((r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffnu))^4 + 3*r^2*((diffm))^2 + 2*(r^5 - 3*r^4*m(r) + 2*r^3*m(r)^2 - (r^5 - 2*r^4*m(r))*(diffm))*((diffnu))^3 - 2*r*m(r)*(diffm) + (r^4*((diffm))^2 + 3*r^4 - 8*r^3*m(r) + 5*r^2*m(r)^2 - 2*(2*r^4 - 3*r^3*m(r))*(diffm))*((diffnu))^2 + (r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffdiffnu))^2 + 3*m(r)^2 + 2*(r^3*((diffm))^2 - r^3*(diffm) - r^2*m(r) + 3*r*m(r)^2)*(diffnu) + 2*(r^3*m(r) - 2*r^2*m(r)^2 + (r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffnu))^2 - (r^4 - 2*r^3*m(r))*(diffm) + (r^5 - 3*r^4*m(r) + 2*r^3*m(r)^2 - (r^5 - 2*r^4*m(r))*(diffm))*(diffnu))*(diffdiffnu))/r^6show(naked_Contracted_ricci.full_simplify())print('Kretschmann scalar in terms of Energy-Momentum tensor')naked_Kretschmann_scalar=4*((r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffnu))^4 + 2*r^2*((diffm))^2 + 2*(r^4*m(r) - 2*r^3*m(r)^2 - (r^5 - 2*r^4*m(r))*(diffm))*((diffnu))^3 - 4*r*m(r)*(diffm) + (r^4*((diffm))^2 - 2*r^3*m(r)*(diffm) + 2*r^4 - 8*r^3*m(r) + 9*r^2*m(r)^2)*((diffnu))^2 + (r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffdiffnu))^2 + 6*m(r)^2 + 2*((r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffnu))^2 + (r^4*m(r) - 2*r^3*m(r)^2 - (r^5 - 2*r^4*m(r))*(diffm))*(diffnu))*(diffdiffnu))/r^6show(naked_Kretschmann_scalar.full_simplify().expand())print('Weyl scalar in terms of Energy-Momentum tensor')naked_Weyl_scalar=4/3*((r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffnu))^4 + r^2*((diffm))^2 - 2*(r^5 - 5*r^4*m(r) + 6*r^3*m(r)^2 + (r^5 - 2*r^4*m(r))*(diffm))*((diffnu))^3 - 6*r*m(r)*(diffm) + (r^4*((diffm))^2 + r^4 - 12*r^3*m(r) + 21*r^2*m(r)^2 + 2*(2*r^4 - 5*r^3*m(r))*(diffm))*((diffnu))^2 + (r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffdiffnu))^2 + 9*m(r)^2 - 2*(r^3*((diffm))^2 - 3*r^2*m(r) + 9*r*m(r)^2 + (r^3 - 6*r^2*m(r))*(diffm))*(diffnu) - 2*(3*r^3*m(r) - 6*r^2*m(r)^2 - (r^6 - 4*r^5*m(r) + 4*r^4*m(r)^2)*((diffnu))^2 - (r^4 - 2*r^3*m(r))*(diffm) + (r^5 - 5*r^4*m(r) + 6*r^3*m(r)^2 + (r^5 - 2*r^4*m(r))*(diffm))*(diffnu))*(diffdiffnu))/r^6show(naked_Weyl_scalar.full_simplify().expand())##TOV EquationTmix=g.inverse()['^ij']*T['_jk']nabla=g.connection() #Levi-Civita connectiondTmix=nabla(Tmix) #Covariance derivative form tanimladim.divT == dTmix['^i_{ji}'] #Trace'ini alarak T'nin Divergence'ini yazdirdim.show(divT.display())#T'nin divergence'ini 0'a esitleyerek TOV icin gerekli olan denklemi cozdurdum.EEp_sol = solve(divT[1].expr()==0, diff(p(r),r))EEp = EEp_sol[0]show(EEp.full_simplify())#ornek olarak basit bir polytropic EoS kullanarak TOV denklemlerini yazdirdim.k=var('k')p_eos(r)=k*rho(r)^2print('for a basic EoS')show(p,'=',p_eos(r))#p_eos'i ve nu'yu cozdugum TOV denklemlerine substitute ettim.EE_1_rho = EE_1.substitute_function(p, p_eos)EEp_rho = EEp.substitute_function(p, p_eos)EEp_rho = (EEp_rho / (2*k*rho(r))).simplify_full()EEp_rho = EEp_rho.subs({diff(nu(r),r): EE_1_rho.rhs()}).simplify_full()print('TOV equations')#TOV equationsfor i in [EE_0, EE_1_rho, EEp_rho]:    show(i)